#!/usr/bin/env bash

. ${OPENSHIFT_LAB_PATH}/bin/labEnv.sh
. ${OPENSHIFT_LAB_PATH}/bin/labUtils.sh
. ${OPENSHIFT_LAB_PATH}/bin/piUtils.sh
. ${OPENSHIFT_LAB_PATH}/bin/routerUtils.sh
. ${OPENSHIFT_LAB_PATH}/bin/routerWireless.sh
. ${OPENSHIFT_LAB_PATH}/bin/routerConfig.sh
. ${OPENSHIFT_LAB_PATH}/bin/clusterUtils.sh
. ${OPENSHIFT_LAB_PATH}/bin/clusterDeploy.sh
. ${OPENSHIFT_LAB_PATH}/bin/clusterDestroy.sh
. ${OPENSHIFT_LAB_PATH}/bin/clusterButaneConfig.sh
. ${OPENSHIFT_LAB_PATH}/bin/hostUtils.sh
. ${OPENSHIFT_LAB_PATH}/bin/devTools.sh
. ${OPENSHIFT_LAB_PATH}/bin/labCliHelp.sh

SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa"
SCP="scp -O -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa"

for i in "$@"
do
  case $i in
    -c=*|--cluster=*)
      CLUSTER="${i#*=}"
    ;;
    *)
       # catch all
    ;;
  esac
done

if [[ -z ${CLUSTER} ]]
then
  labctx
else
  labctx ${CLUSTER}
fi

if [[ ${LAB_CTX_ERROR} == "true" ]]
then
  echo "Error processing lab config for cluster: ${CLUSTER}"
  exit 1
fi

OC="oc --kubeconfig=${KUBE_INIT_CONFIG}"

for i in "$@"
do
  case $i in
    --pi)
      configPi "$@"
    ;;
    --router)
      configRouter "$@"
    ;;
    --disconnect)
      noInternet
    ;;
    --connect)
      restoreInternet
    ;;
    --deploy)
      deploy "$@"
    ;;
    --destroy)
      destroy "$@"
    ;;
    --start)
      start "$@"
    ;;
    --stop)
      stop "$@"
    ;;
    --user)
      addUser "$@"
    ;;
    --trust)
      trustCerts "$@"
    ;;
    --config-infra)
      configInfraNodes
    ;;
    --csr)
      approveCsr
    ;;
    --pull-secret)
      pullSecret
    ;;
    --git-secret)
      gitSecret "$@"
    ;;
    --butane)
      getButaneRelease
    ;;
    --console)
      ocConsole "$@"
    ;;
    --login)
      ocLogin "$@"
    ;;
    --cli)
      getOkdCmds
    ;;
    --dns)
      resetDns
    ;;
    --mirror)
      mirrorOkdRelease
    ;;
    --kube)
      setKubeConfig
      echo ${KUBECONFIG}
    ;;
    --ceph)
      initCephVars "$@"
    ;;
    --monitor)
      monitor "$@"
    ;;
    --post)
      postInstall "$@"
    ;;
    --reset-nic)
      resetNic "$@"
    ;;
    --nodes)
      getNodes "$@"
    ;;
    --dev-tools)
      devTools "$@"
    ;;
    --kvm-pwd)
      createHostPwd
    ;;
    --hostpath)
      deploySnoHostPath
    ;;
    --devspaces)
      devSpaces "$@"
    ;;
    --qnap)
      qnap "$@"
    ;;
    *)
      #  echo "unknown option ${i}"
      #  usage "header"
    ;;
  esac
done
